#ifndef TEXTUREPACK_H__
#define TEXTUREPACK_H__

#include <ngl/Types.h>
#include <map>
#include <string>
//----------------------------------------------------------------------------------------------------------------------
/// @brief class to read and maintain a map of packed textures created by the
/// PackTool program
//----------------------------------------------------------------------------------------------------------------------

class TexturePack
{
  public :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief singleton instance of the class
    //----------------------------------------------------------------------------------------------------------------------
    static TexturePack *instance();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief load the texture pack file
    /// @param _fname the name of the file to load
    //----------------------------------------------------------------------------------------------------------------------
    bool load(const std::string &_fname);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief clear the texture pack and remove the GL textures
    //----------------------------------------------------------------------------------------------------------------------
    void clear();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the texture name by id
    /// @param _name the name of the texture to load
    /// @returns GLuint the OpenGL generated texture id
    //----------------------------------------------------------------------------------------------------------------------
    GLuint getTexture(const std::string &_name);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief bind the texture named _name
    //----------------------------------------------------------------------------------------------------------------------
    void bind(const std::string &_name);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief unbind the texture (i.e. set to texute 0)
    //----------------------------------------------------------------------------------------------------------------------
    void unbind();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief append another texture pack to the current pack
    //----------------------------------------------------------------------------------------------------------------------
    void append(const std::string &_name);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the number of textures in the pack
    //----------------------------------------------------------------------------------------------------------------------
    inline unsigned int getNumTextures() const {return m_numTextures;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief iterator to access the textures (const) begin
    //----------------------------------------------------------------------------------------------------------------------
    std::map<std::string,GLuint>::const_iterator begin()const { return m_textures.begin();}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief end iterator of the textures (const)
    //----------------------------------------------------------------------------------------------------------------------
    std::map<std::string,GLuint>::const_iterator end()const { return m_textures.end();}
  private :
    //----------------------------------------------------------------------------------------------------------------------
    // @brief default ctor singleton so private
    //----------------------------------------------------------------------------------------------------------------------
    TexturePack() : m_numTextures(0){;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor private as singleton
    //----------------------------------------------------------------------------------------------------------------------
    ~TexturePack(){;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief class instance pointer for singleton
    //----------------------------------------------------------------------------------------------------------------------
    static TexturePack *s_instance;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a map of texture name to OpenGL pointer
    //----------------------------------------------------------------------------------------------------------------------
    std::map<std::string,GLuint> m_textures;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief number of textures in pack
    //----------------------------------------------------------------------------------------------------------------------
    unsigned int m_numTextures;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief enumeration of the texture type for loading
    //----------------------------------------------------------------------------------------------------------------------
    enum COMPRESSION{DXT1,DXT3,DXT5};

};




#endif
